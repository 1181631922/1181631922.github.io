[{"title":"如何求单向链表是否有环，如果有的话求环的长度以及这个单向链表的长度","date":"2019-11-29T08:57:35.022Z","path":"2019/11/29/link/Link_01/","text":"1.下图为这个表的结构以及问题 2.首先要确定这个链表有没有环思路的话不难，都知道如果有环的话那么遍历这个链表则是没有结尾的，而且最后面的肯定是重复的，最直接想到的就是穷举法，对于上图个数不多的还好，如果表是特别长的话就蛋疼了，那再换个切入点，上学时都跑过三千米吧，第一能把倒数第一落下几圈，是不是有思路了，就是可以定义快慢两个指针，如果有环的话则快慢指针总会能相遇，否则的话这两个指针永远相遇不了。思路有了下一步就是编码了。 123456789101112131415161718192021222324252627282930313233343536373839//构造数据结构，链表不知道是什么类型的，这里用了一个泛型//单向链表 class Node&lt;T&gt;( //当前data值 var data: T? = null, //指向下一个的指针 var next: Node&lt;T&gt;? = null) &#123; override fun toString(): String &#123; return &quot;Node(data=$data, next=$next)&quot; &#125; &#125; //再来就是判断一个链表是否有环fun &lt;T&gt; hasCycle(node: Node&lt;T&gt;): Boolean &#123; //先定义两个指针，一个慢指针，一个快指针，让慢指针去碰撞快指针 //慢指针 var firstNode = node //快指针 var secondNode = node //死循环 while (true) &#123; if (firstNode.next == null) &#123; return false &#125; if (secondNode.next == null) &#123; return false &#125; if (secondNode.next!!.next == null) &#123; return false &#125; firstNode = firstNode.next!! secondNode = secondNode.next!!.next!! if (firstNode == secondNode) &#123; //快慢指针相遇则证明有环 return true &#125; &#125; &#125; 3.求这个链表的长度这个思路也很简单，求出那个结环的Node就可以了，第一反应应该就是上一步的相遇点不就是么，但是再仔细想想是不是感觉不是，有可能是环里面的任何一个元素，那么ok换个思路，还是类比以上的思路，先求出这个环的长度，然后还是两个指针步长相同，先让其中一个指针先走环的长度，然后再让两个一起按照一个步长走，那么碰撞时的相遇点就是要求的Node 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758//第一步先求环的长度，思路比较简单//首先还是要快慢指针相遇，此时快指针固定，慢指针继续走，再次相遇就是环的长度fun &lt;T&gt; findCycleLength(node: Node&lt;T&gt;): Int &#123; var circleLength = 0 var firstNode = node var secondNode = node var hasCircle = false while (true) &#123; if (firstNode.next == null) &#123; return circleLength &#125; if (secondNode.next == null) &#123; return circleLength &#125; if (secondNode.next!!.next == null) &#123; return circleLength &#125; if (!hasCircle) &#123; firstNode = firstNode.next!! secondNode = secondNode.next!!.next!! &#125; else &#123; secondNode = secondNode.next!! &#125; if (firstNode == secondNode) &#123; hasCircle = true if (hasCircle &amp;&amp; circleLength != 0) &#123; return circleLength + 1 &#125; &#125; else &#123; if (hasCircle) &#123; circleLength++ &#125; &#125; &#125; &#125; //上面方法求出环的长度，再来求重复的Nodefun &lt;T&gt; findRepetPoint(node: Node&lt;T&gt;, circleLength: Int): Node&lt;T&gt; &#123; var front = node var back = node //前面的先走circleLength (0 until circleLength).forEachIndexed &#123; index, i -&gt; front = front.next!! &#125; println(front.data) while (true) &#123; front = front.next!! back = back.next!! if (front == back) &#123; return front &#125; &#125; &#125; //这样这个链表的长度就求出来了 4.总结查找链表是否有环使用快慢指针比较巧妙，感觉指针游离作比较，源码地址","tags":[]},{"title":"如何求单链表的某个元素","date":"2019-11-29T08:46:14.518Z","path":"2019/11/29/link/Link_02/","text":"1.已知链表，需要求链表某个位置的元素其实这个问题解决思路很简单，遍历完查找就好了编码比较简单就不做注释了 123456789fun &lt;T&gt; printNode(node: Link1.Node&lt;T&gt;) &#123; var temp = node println(temp.data) while (temp.next != null) &#123; temp = temp.next!! println(temp.data) &#125; &#125; 2.再出个这个题的变形如果是求这个链表倒数第k个元素，并且不允许遍历表该怎么做，这个就比较有意思了，其实可以做个类比，就比如说对数据操作做到时间和空间的最优解，那就是可以再去开辟一块内存，也就是用两个指针去解决，这两个指针的距离为k，那么快指针走到最后一个Node时，慢指针即为所求 1234567891011121314151617//假设求倒数第2个元素 fun &lt;T&gt; findSomeNode(node: Link1.Node&lt;T&gt;, count: Int): Link1.Node&lt;T&gt; &#123; var slowNode = node var fastNode = node (0 until count).forEachIndexed &#123; index, i -&gt; fastNode = fastNode.next!! &#125; while (true) &#123; slowNode = slowNode.next!! if (fastNode.next == null) &#123; return slowNode &#125; else &#123; fastNode = fastNode.next!! &#125; &#125; &#125; 3.总结经过和上文的对比应该能总结出这类问题的解决方法了，其实往深层理解就是时间和空间的转变就拿这个问题来说 第一种解决方法是先遍历再去定位，那么首先要遍历完所有的，此时拿到长度再去定位到固定元素，拿极端举例子比方说倒数第一个，就需要遍历两遍数组 第二种方法就是拿两个指针但是遍历一次就相当于用空间换了时间以上是个人理解，源码地址","tags":[]},{"title":"Glide使用_3(Glide中bitmap处理之LruArrayPool)","date":"2018-03-20T07:59:29.000Z","path":"2018/03/20/Glide使用_03/","text":"1.详细看下LruArrayPool这个类 LruArrayPool的作用是用来维持图片引用的序列池","tags":[]},{"title":"Glide使用_1(Glide简单引入及使用)","date":"2018-03-20T07:52:16.000Z","path":"2018/03/20/Glide使用_01/","text":"1.引入glide依赖（4.5版本） 官方文档说的挺简单的 点击查看官方文档 ，4.3之前直接引入就可以了， 但是到了4.5有些问题，主要是它本身会去依赖com.android.support包，经过查看源码，他是这么写的： api \"com.android.support:support-fragment:${ANDROID_SUPPORT_VERSION}\" compileOnly \"com.android.support:appcompat-v7:${ANDROID_SUPPORT_VERSION}\" 它会引入最新的包，我当时用的是26.1.0，而最新的则是27.0.2，这样会和我用的一些控件有冲突，下面是解决方法 compile ('com.github.bumptech.glide:glide:4.5.0',{ exclude group: 'com.android.support', module: 'support-v4' exclude group: 'com.android.support', module: 'support-fragment' exclude group: 'com.android.support', module: 'support-annotations' }) 这样问题就得以解决了，依赖成功引入，下面开始使用 2.Glide的简单使用 用glide为的就是解决图片加载问题，glide 4.x较3.x改动挺大的，感觉使用方法上越来越趋近于fresco，如果是仅仅加载图片的话 以下就可以满足： Glide.with(Context) .load(imgUrl) .into(imageView) 3.Glide自定义配置使用 我用的是kotlin和java混合使用的，出现了bug，查阅了一下官网github还有bug， 官方说明七天以后应该会解决 看一下官方自定义的配置吧，一般咱们最在乎的是图片的默认存储位置（感觉也不是很在乎，说在乎是因为增删改查，但是如果api提供了 很好的增删改查的方法其实也就不是很在乎了），再有就是内存默认大小（自我感觉框架做的配置已经很好了），缓存的大小，日志输出level 1.图片存储位置Glide.java类源码可以知道 //package com.bumptech.glide; private static final String DEFAULT_DISK_CACHE_DIR = \"image_manager_disk_cache\"; 具体位置需要root手机才能看到，而且图片的存储的命名不是常用的（这里以jpg为例，图片的后缀为.0），具体位置： /data/data/com.fanyafeng.mlmoduletest/cache/image_manager_disk_cache 2.内存默认大小：api中的内存是根据不同屏幕分辨率设置的 //package com.bumptech.glide.load.engine.cache.MemorySizeCalculator if (targetMemoryCacheSize + targetBitmapPoolSize","tags":[]},{"title":"Glide使用_2(Glide中bitmap处理)","date":"2018-03-20T07:52:16.000Z","path":"2018/03/20/Glide使用_02/","text":"1.这里着重讲下bitmap的回收（估计需要很长时间） 看下glide定义的关于bitmap回收的一些类 2.先来分析定义的接口类ArrayPool package com.bumptech.glide.load.engine.bitmap_recycle; /** * Interface for an array pool that pools arrays of different types. * 泛型的数据列表池 */ public interface ArrayPool { /** * A standard size to use to increase hit rates when the required size isn't defined. * Currently 64KB. * 默认给定的大小为64k */ int STANDARD_BUFFER_SIZE_BYTES = 64 * 1024; /** * Optionally adds the given array of the given type to the pool. * * < p>Arrays may be ignored, for example if the array is larger than the maximum size of the * pool. * 添加成员 * @deprecated Use {@link #put(Object)} */ @Deprecated < T> void put(T array, Class< T> arrayClass); /** * Optionally adds the given array of the given type to the pool. * * < p>Arrays may be ignored, for example if the array is larger than the maximum size of the * pool. */ < T> void put(T array); /** * Returns a non-null array of the given type with a length >= to the given size. * * < p>If an array of the given size isn't in the pool, a new one will be allocated. * * < p>This class makes no guarantees about the contents of the returned array. * 获取成员 * @see #getExact(int, Class) */ < T> T get(int size, Class< T> arrayClass); /** * Returns a non-null array of the given type with a length exactly equal to the given size. * * < p>If an array of the given size isn't in the pool, a new one will be allocated. * * < p>This class makes no guarantees about the contents of the returned array. * * @see #get(int, Class) */ < T> T getExact(int size, Class< T> arrayClass); /** * Clears all arrays from the pool. * 清楚所有缓存 */ void clearMemory(); /** * Trims the size to the appropriate level. * * @param level A trim specified in {@link android.content.ComponentCallbacks2}. * 根据不同的级别来清楚缓存，这个需要看一下源码，14以后定义的， */ void trimMemory(int level); } 3.再来看下实现ArrayPool接口的类LruArrayPool LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。","tags":[]},{"title":"Kotlin初探（二）","date":"2017-11-01T07:57:02.000Z","path":"2017/11/01/Kotlin初探（二）/","text":"1.说一下老项目中遇到的一些比较头疼的问题 1.java中一个抽象类继承一个抽象类实现一个接口，但是继承的抽象类和实现的接口中有相同的方法是不会报错的，而且编译是没问题的，但是如果把这个抽象类改成 kotlin语法的话编译器是过不去的，解决方法要么把方法都抽到kotlin的那个类中，或者再用java包一层 2.使用kotlin写一个类需要继承一个有泛型的抽象类，本以为能解决问题，然而并不能，不能，不，能！！！因为泛型的三大类别，（类，接口）和函数全都 不能用型号投影，官方给的说法是：For example, if the type is declared as interface Function< in T, out U> we can imagine the following star-projections 然而并没有什么卵用，可是如果是For Foo< out T>, where T is a covariant type parameter with the upper bound TUpper, Foo is equivalent to Foo< TUpper>. It means that when the T is unknown you can safely read values of TUpper from Foo. 这种情况下是可以的。如果用泛型的话还是要谨慎一些。 3.对于map和list，kotlin都有对应的封装的方法参数，需要结合demo和源码去重写老代码 4.在写一些bean，多层嵌套的时候会简化很多，这个就不赘述了，用一下就知道了 暂时到这，有东西再更新 5.在kotlin中写静态方法或者定义静态变量比较简单，用companion object {}包一下就可以，如果整个类都是静态方法的话在类前面加个object就可以了，调用 的时候和java有点区别，这是用java方法进行调用 CarLoanRepaymentFragment.Companion.newInstance(result) 2.还有就是遇到的一些坑，有的是费脑子，有的是绕 1.当一个类去继承另一个定义有抽象方法的抽象类的话，如果重名的话需要去处理一下，因为kotlin自带了get和set属性，而且不能重命名，这个比较蛋疼，需要用private去修饰一下变量， 然后自己再去写get或者set方法 //1.先看一下抽象类 abstract class FilterBaseBean : KotlinBaseBean() { abstract fun getName(): String abstract fun getLabel(): String } //2.再来看一下继承它的类,注释掉的是错误的使用方法,附带一下查的资料链接https://stackoverflow.com/questions/29268526/how-to-overcome-same-jvm-signature-error-when-implementing-a-java-interface class OutputStandardsConfig(private val name: String?,private val outputStandard:String?) : FilterBaseBean() { // var outputStandard: String? = null // var name: String? = null // get { // return field // } // set(value) { // name = field // } fun getOutputStandard():String{ return outputStandard!! } override fun getName(): String { return name!! } override fun getLabel(): String { return outputStandard!! } } 2.再有就是在bean里面做判断的时候，如果判断本身的话不能直接用需要用field关键字，否则的话会get死循环 class LoanProductSpecDTOListBean : KotlinBaseBean() { var loanRate: String? = null var paybackPeriod: String? = null var platformRate: String? = null var isCheck = false var monthPay: String? = null get() { if (TextUtils.isEmpty(field)) {//判空这里不能直接用monthPay，需要用field return paybackPeriod } else { return field } } }","tags":[]},{"title":"Kotlin常用操作符","date":"2017-10-31T07:33:36.000Z","path":"2017/10/31/Kotlin初探（三）/","text":"1.Elvis操作符?: 如果？：左边的表达式非空，则操作符返回左边的结果，否则返回右边的结果（仅在左侧为空的时候右侧的表达式才会进行计算）。 val a=b?.length?:-1 val a:Int = if(b!=null) b.length else -1 2.安全转换as? 当使用as转型的时候，可能会经常出现ClassCastException。所以，现在使用as?安全转型，当转型不成功的时候，它会返回null。 当使用intent传值时有可能会出现空字符串不能用as强制转型，这时需要使用as？ val m:Int?=a as? Int 3.冒号 用于类的继承，变量的定义 1.类型和超类型（父类）之间的冒号前要有一个空格 2.实例和类型之间的冒号前不要空格 定义变量：var str: String?=null 类的继承与变量定义：class MainActivity< T : Serializable>(str : String) : Activity 4.类型判断符is 检查某个实例是否是某个类型，如果判断出属于某个类型，那么判断后的分支中可以直接当该类型使用，无需显式转换 fun getStringLength(obj: Any): Int?{ if(obj is String && obj.length>0) return obj.length } 5.范围操作符 .. 以及 in 使用in运算符来检查某个数字是否在指定区间内 if(i in 1..10){//i=1 println(i) } downTo()函数 区间内循环： for(i in 4 downTo 1){ println(i)//4321 } step()函数 可以进行任意数量的迭代，而不是每次变化都是1 for(i in 1..4 step 2) println(i)//1 3 for(i in 4 downTo 1 step 2) println(i) //4 2 多行输入符 三个双引号 三引号的形式用来输入多行文本，也就是说在三引号之间输入的内容将被原样保留，之中的单引号和双引号不用转义，其中的不可见字符比如/n和/t都会被保留 val str=\"\"\" one two \"\"\" val str =\"one\\ntwo\" val str =\"one\"+\"\\n\"+\"two\" forEach遍历 遍历一个list可以用list.forEach{ b-> blist.add(b) } 6.$符号 这个我感觉在拼串上用的比较方便一点 val pair = Pair(1, \"one\") val (num, name) = pair println(\"num = $num, name = $name\") 7.==和===的区别 ==是判断是否相等，===判断值以及引用是否完全相等 val num: Int = 128; val a:Int? = num val b:Int? = num println(a == b) print(a === b) 8._（下划线） 我理解的是构造参数中在下文用不到的参数可以用_代替 val book = Book(1, \"英语\") val (id, _) = book 9.::符号 1.常见的是得到类的class对象 //得到类的Class对象 startActivity(Intent(this@KotlinActivity, MainActivity::class.java)) //内联函数和reified后续介绍 inline fun < reified T> Gson.fromJson(json:String):T { return fromJson(json, T::class.java) } 2.方法的引用 var setBook = setOf(\"hello\", \"hi\", \"你好\") // setBook.forEach { print(it)} setBook.forEach(::print) 10.@符号 1.限定this的类型 class User { inner class State{ fun getUser(): User{ //返回User return this@User } fun getState(): State{ //返回State return this@State } } } 2.跳出双层for循环 loop@ for (itemA in arraysA) { var i : Int = 0 for (itemB in arraysB) { i++ if (itemB > 2) { break@loop } println(\"itemB:$itemB\") } } 3.命名函数自动定义标签（这个还不是很明白） fun fun_run(){ run { println(\"lambda\") } var i: Int = run { return@run 1 } println(\"$i\") //匿名函数可以通过自定义标签进行跳转和返回 i = run (outer@{ return@outer 2 }) println(i) } 4.从循环方法中跳出 fun forEach_label(ints: List< Int>) { var i =2 ints.forEach { //forEach中无法使用continue和break; // if (it == 0) continue //编译错误 // if (it == 2) /*break //编译错误 */ print(it) } run outer@{ ints.forEach { if (it == 0) return@forEach //相当于在forEach函数中continue,实际上是从匿名函数返回 if (it == 2) return@outer //相当于在forEach函数中使用break,实际上是跳转到outer之外 } } if (i == 3) { //每个函数的名字代表一个函数地址，所以函数自动成为标签 return@forEach_label //等同于return } } 11.{}符号 这个还有->应该是lambda表达式 // 一个参数 var callback: ((str: String) -> Unit)? = null callback = { println(it)} // 判断并使用 callback?.invoke(\"hello\") //两个参数 var callback2: ((name: String, age: Int) -> Unit)? = null callback2 = { hello: String, world: Int -> println(\"$hello's age is $world\") } callback2?.invoke(\"Tom\", 22) var callback3 :((num1:Int, num2: Int)->String)? = null //类型可以推断 callback3 = { num1, num2 -> var res:Int = num1 + num2 res.toString() } println(callback3?.invoke(1, 2)) 12.?问号 表示对象可能为空 //在变量类型后面加上问号，代表该变量是可空变量 var name: String? = \"zhangsan\" /** * 如果str不能转为Int类型，则返回null */ fun parseInt(str: String): Int? { // (代码略) } b?.length //如果 b非空，就返回 b.length ，否则返回 null，这个表达式的类型是 Int? 。","tags":[]},{"title":"Kotlin初探（一）","date":"2017-10-24T08:11:43.000Z","path":"2017/10/24/Kotlin初探（一）/","text":"1.官网给出了个几个有点说明为什么Kotlin适合开发Android 1.兼容性：Kotlin 与 JDK 6 完全兼容，保障了 Kotlin 应用程序可以在较旧的 Android 设备上运行而无任何问题。Kotlin 工具在 Android Studio 中会完全支持，并且兼容 Android 构建系统。 2.性能：由于非常相似的字节码结构，Kotlin 应用程序的运行速度与 Java 类似。 随着 Kotlin 对内联函数的支持，使用 lambda 表达式的代码通常比用 Java 写的代码运行得更快。 3.互操作性：Kotlin 可与 Java 进行 100％ 的互操作，允许在 Kotlin 应用程序中使用所有现有的 Android 库 。这包括注解处理，所以数据绑定和 Dagger 也是一样。 4.占用：Kotlin 具有非常紧凑的运行时库，可以通过使用 ProGuard 进一步减少。 在实际应用程序中，Kotlin 运行时只增加几百个方法以及 .apk 文件不到 100K 大小。 5.编译时长：Kotlin 支持高效的增量编译，所以对于清理构建会有额外的开销，增量构建通常与 Java 一样快或者更快。 6.学习曲线：对于 Java 开发人员，Kotlin 入门很容易。包含在 Kotlin 插件中的自动 Java 到 Kotlin 的转换器有助于迈出第一步。 注：根据测试感觉编译时间并没有更快，而且AS中的Kotlin插件转换为java有好多奇怪的错，还是需要自己去写，对于兼容性，性能和占用和他说的感觉没有什么区别，但是关于互操作性还是差了点，这里踩过几个坑，后文会说 戳我进入中文网可以去这看下入门介绍，感觉基础的使用看这些足够了 2.AS中使用kotlin &nbsp;&nbsp;&nbsp;&nbsp;1.在AndroidStudio中使用kotlin的话需要安装插件，这个老手的话都知道在plugins里面找，安装成功以后需要重启，不建议每次都更新到最新版，还是用稳定版最好，因为有些问题可能是插件的问题。 &nbsp;&nbsp;&nbsp;&nbsp;2.再有就是尽量不要用插件的java to kotlin，还是自己写一个是印象深刻，另一个是少一些奇怪的bug。 &nbsp;&nbsp;&nbsp;&nbsp;3.如果项目是新建的话，插件会自动帮你加上依赖，如果是中途想要加kotlin的话在新建完成以后会有提示让你加上依赖，new的话会让你选择是普通的java文件还是kotlin文件，准备工作就做完了 在根目录的build.gradle中这样写就可以了： buildscript { ext.kotlin_version = '1.1.2-4' repositories { jcenter() } dependencies { classpath 'com.android.tools.build:gradle:2.2.3' classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\" // NOTE: Do not place your application dependencies here; they belong // in the individual module build.gradle files } } allprojects { repositories { jcenter() } } task clean(type: Delete) { delete rootProject.buildDir } 4.暂且说一下使用的感受 1.新项目直接用kotlin的话，如果把base和工具类封装好的话其实用起来挺好的，主要的难点就是要熟悉他的规则，规则麻烦写法简单，如果需要引用一些第三方库的话最好封装一下。 2.旧项目而且比较大，原来就封装过很多东西的话如果重写base或者封装一类的很蛋疼，有些东西java支持但是kotlin暂时不支持，不知道以后是不是支持，有些东西自己还是在原来的base上再重新抽取一层java 再在kotlin支持的情况下再去封装一层kotlin 3.默认支持lambda表达式，而且写法很简单，如果对语法熟悉的话写起来很快，而且最主要的是空指针异常比较少 5.下面是我一个小的demo，封装了一下base，写起来感觉挺舒服的，估计是新项目的原因吧 kotlin简单入门：https://github.com/1181631922/KotlinDemo","tags":[]},{"title":"基于Bugly的热修复(一)","date":"2017-03-14T09:23:53.000Z","path":"2017/03/14/Android热修复-腾讯Bugly(一)/","text":"1.如果想接入bugly更新的话第一步还是要看官方文档。 戳我查看 官方文档&nbsp;&nbsp;&nbsp;&nbsp;注：需要手动创建一个名字为：tinker-support.gradle 的文件。 来看一下我的目录结构： 2.如果看到此的话默认项目工程已经搭建成功，先来看如何进行一个简单的测试 这里大致说一下热更新的原理，是对dex-xxx打补丁，有一点需要注意就是对应的补丁需要打倒对应的apk下，bugly已经帮我们做了校验了， 这里大致分了两个校验： 1.假设存在基础包，那么在进行打补丁包的时候需要基于相应的基础包目录下，这里tinker的gradle会进行严格校验。 2.如果你的基础apk包没有用户进行联网激活（只要有一个联网用户就算激活），那么补丁包是上传不成功的。 tinker-support.gradle文件需要大家进行自己配置，这里两个红箭头的在打补丁包的时候必须要对应，多版本的话把下面的红框内的注释去掉就可以了。 3.开始打包 &nbsp;&nbsp;&nbsp;&nbsp;先需要打一个release包，这个我们成为基础包，是给应用市场传的，供用户下载，再然后需要在对应的dir下打 补丁包，如果没有多渠道的话基本没什么争议，也不用注意啥，但是，如果是多渠道，想在每个渠道都有不同的显示的话那么渠道包需要单打，这个应该都知道， 下面会上图的，剩下的就是分发，需要上传到腾讯的bugly的后台，前提是你的基础包最少有一个用户激活才可以，关于补丁包下发的话腾讯已经帮你做好了统计了， 到此bugly的简单使用基本搞定，基本就是页面的更新，bug的修改。 下面这个是无渠道的，或者可以理解为一个渠道 下面这个是多渠道","tags":[]},{"title":"Android仿淘宝等电商购物车","date":"2017-02-23T09:24:23.000Z","path":"2017/02/23/Android仿淘宝等电商购物车/","text":"1.写这个Demo估计很早了 当时的时候没留意，着急写了个demo，因为项目要用，但是里面有bug， 现在过来填坑，解决bug本来想在原来的csdn改一下的，无奈动图比较大也插不进去 。 csdn原文请点击进入 2.代码中有详细注释，这里直接上代码 2.1 ChildItemBean,这个相当于商品的bean import android.os.Parcel; import android.os.Parcelable; /** * Created by fanyafeng on 2016/2/23,0023. */ public class ChildItemBean implements Parcelable,Comparable{ private boolean childIsChecked; private String childImage; private String name; private int count; public ChildItemBean(boolean childIsChecked, String childImage, String name, int count) { this.childIsChecked = childIsChecked; this.childImage = childImage; this.name = name; this.count = count; } public boolean isChildIsChecked() { return childIsChecked; } public void setChildIsChecked(boolean childIsChecked) { this.childIsChecked = childIsChecked; } public String getChildImage() { return childImage; } public void setChildImage(String childImage) { this.childImage = childImage; } public String getName() { return name; } public void setName(String name) { this.name = name; } public int getCount() { return count; } public void setCount(int count) { this.count = count; } @Override public String toString() { return \"ChildItemBean{\" + \"childIsChecked=\" + childIsChecked + \", childImage='\" + childImage + '\\'' + \", name='\" + name + '\\'' + \", count=\" + count + '}'; } @Override public int compareTo(Object another) { return 0; } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel dest, int flags) { dest.writeByte((byte) (childIsChecked ? 1 : 0)); dest.writeString(childImage); dest.writeString(name); dest.writeInt(count); } protected ChildItemBean(Parcel in) { childIsChecked = in.readByte() != 0; childImage = in.readString(); name = in.readString(); count = in.readInt(); } public static final Creator< ChildItemBean> CREATOR = new Creator< ChildItemBean>() { @Override public ChildItemBean createFromParcel(Parcel in) { return new ChildItemBean(in); } @Override public ChildItemBean[] newArray(int size) { return new ChildItemBean[size]; } }; } 2.2 GroupItemBean,这个相当于店铺的bean import android.os.Parcel; import android.os.Parcelable; /** * Created by fanyafeng on 2016/2/23,0023. */ public class GroupItemBean implements Parcelable,Comparable{ private boolean groupIsChecked; private String groupImage; private String groupName; private boolean groupIsCoupon; private boolean groupIsEdit; public GroupItemBean(boolean groupIsChecked, String groupImage, String groupName, boolean groupIsCoupon, boolean groupIsEdit) { this.groupIsChecked = groupIsChecked; this.groupImage = groupImage; this.groupName = groupName; this.groupIsCoupon = groupIsCoupon; this.groupIsEdit = groupIsEdit; } public boolean isGroupIsChecked() { return groupIsChecked; } public void setGroupIsChecked(boolean groupIsChecked) { this.groupIsChecked = groupIsChecked; } public String getGroupImage() { return groupImage; } public void setGroupImage(String groupImage) { this.groupImage = groupImage; } public String getGroupName() { return groupName; } public void setGroupName(String groupName) { this.groupName = groupName; } public boolean isGroupIsCoupon() { return groupIsCoupon; } public void setGroupIsCoupon(boolean groupIsCoupon) { this.groupIsCoupon = groupIsCoupon; } public boolean isGroupIsEdit() { return groupIsEdit; } public void setGroupIsEdit(boolean groupIsEdit) { this.groupIsEdit = groupIsEdit; } @Override public String toString() { return \"GroupItemBean{\" + \"groupIsChecked=\" + groupIsChecked + \", groupImage='\" + groupImage + '\\'' + \", groupName='\" + groupName + '\\'' + \", groupIsCoupon=\" + groupIsCoupon + \", groupIsEdit=\" + groupIsEdit + '}'; } @Override public int compareTo(Object another) { return 0; } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel dest, int flags) { dest.writeByte((byte) (groupIsChecked ? 1 : 0)); dest.writeString(groupImage); dest.writeString(groupName); dest.writeByte((byte) (groupIsCoupon ? 1 : 0)); dest.writeByte((byte) (groupIsEdit ? 1 : 0)); } protected GroupItemBean(Parcel in) { groupIsChecked = in.readByte() != 0; groupImage = in.readString(); groupName = in.readString(); groupIsCoupon = in.readByte() != 0; groupIsEdit = in.readByte() != 0; } public static final Creator< GroupItemBean> CREATOR = new Creator< GroupItemBean>() { @Override public GroupItemBean createFromParcel(Parcel in) { return new GroupItemBean(in); } @Override public GroupItemBean[] newArray(int size) { return new GroupItemBean[size]; } }; } 2.3 ExpandBean,这个相当于列表的item的bean import android.os.Parcel; import android.os.Parcelable; import java.util.List; /** * Created by fanyafeng on 2016/2/22,0022. */ public class ExpandBean implements Comparable,Parcelable{ private GroupItemBean Group; private List< ChildItemBean> Child; public ExpandBean(GroupItemBean group, List< ChildItemBean> child) { Group = group; Child = child; } public GroupItemBean getGroup() { return Group; } public void setGroup(GroupItemBean group) { Group = group; } public List< ChildItemBean> getChild() { return Child; } public void setChild(List< ChildItemBean> child) { Child = child; } @Override public String toString() { return \"ExpandBean{\" + \"Group=\" + Group + \", Child=\" + Child + '}'; } @Override public int compareTo(Object another) { return 0; } @Override public int describeContents() { return 0; } @Override public void writeToParcel(Parcel dest, int flags) { dest.writeParcelable(Group, flags); dest.writeTypedList(Child); } protected ExpandBean(Parcel in) { Group = in.readParcelable(GroupItemBean.class.getClassLoader()); Child = in.createTypedArrayList(ChildItemBean.CREATOR); } public static final Creator< ExpandBean> CREATOR = new Creator< ExpandBean>() { @Override public ExpandBean createFromParcel(Parcel in) { return new ExpandBean(in); } @Override public ExpandBean[] newArray(int size) { return new ExpandBean[size]; } }; } 2.4 ExpandAdapter适配器 import android.content.Context; import android.graphics.Color; import android.net.Uri; import android.util.Log; import android.view.Gravity; import android.view.LayoutInflater; import android.view.View; import android.view.ViewGroup; import android.widget.BaseExpandableListAdapter; import android.widget.Button; import android.widget.CheckBox; import android.widget.CompoundButton; import android.widget.EditText; import android.widget.LinearLayout; import android.widget.TextView; import android.widget.Toast; import com.facebook.drawee.view.SimpleDraweeView; import com.fanyafeng.nested.ChangeData.ChangeDataBean; import com.fanyafeng.nested.ChangeData.ChangeDataDialog; import com.fanyafeng.nested.R; import java.util.ArrayList; import java.util.List; /** * Created by fanyafeng on 2016/2/22,0022. */ public class ExpandAdapter extends BaseExpandableListAdapter { private Context context; private List< ExpandBean> expandBeanList; private GroupHolder groupHolder; private ChildHolder childHolder; private AdapterCallback adapterCallback; public interface AdapterCallback { public void callBack(boolean allSelected, List< ExpandBean> expandBeanCallList); } public void setCallback(AdapterCallback adapterCallback) { this.adapterCallback = adapterCallback; } public void isAllSelect(boolean isAllSelected) { int groupSize; if (expandBeanList != null) { groupSize = expandBeanList.size(); } else { return; } for (int i = 0; i < groupSize; i++) { expandBeanList.get(i).getGroup().setGroupIsChecked(isAllSelected); int childSize = expandBeanList.get(i).getChild().size(); for (int j = 0; j < childSize; j++) { expandBeanList.get(i).getChild().get(j).setChildIsChecked(isAllSelected); } } notifyDataSetChanged(); } public ExpandAdapter(Context context, List< ExpandBean> expandBeanList) { this.context = context; this.expandBeanList = expandBeanList; } @Override public int getGroupCount() { return expandBeanList.size(); } @Override public int getChildrenCount(int groupPosition) { return expandBeanList.get(groupPosition).getChild().size(); } @Override public Object getGroup(int groupPosition) { return expandBeanList.get(groupPosition).getGroup(); } @Override public Object getChild(int groupPosition, int childPosition) { return expandBeanList.get(groupPosition).getChild().get(childPosition); } @Override public long getGroupId(int groupPosition) { return groupPosition; } @Override public long getChildId(int groupPosition, int childPosition) { return childPosition; } @Override public boolean hasStableIds() { return true; } class GroupHolder { CheckBox check_parent; SimpleDraweeView iv_expand_icon; TextView tv_expand_name; TextView tv_expand_edit; TextView tv_expand_get; } @Override public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) { if (convertView == null) { convertView = LayoutInflater.from(context).inflate(R.layout.layout_parent_expand, null); groupHolder = new GroupHolder(); groupHolder.check_parent = (CheckBox) convertView.findViewById(R.id.check_parent); groupHolder.iv_expand_icon = (SimpleDraweeView) convertView.findViewById(R.id.iv_expand_icon); groupHolder.tv_expand_name = (TextView) convertView.findViewById(R.id.tv_expand_name); groupHolder.tv_expand_get = (TextView) convertView.findViewById(R.id.tv_expand_get); groupHolder.tv_expand_edit = (TextView) convertView.findViewById(R.id.tv_expand_edit); convertView.setTag(groupHolder); } else { groupHolder = (GroupHolder) convertView.getTag(); } // checkbox状态 groupHolder.check_parent.setOnClickListener(new GroupClick(groupPosition)); // 是否处于选中状态 if (expandBeanList.get(groupPosition).getGroup().isGroupIsChecked()) { groupHolder.check_parent.setChecked(true); } else { groupHolder.check_parent.setChecked(false); } // 是否有优惠券 if (expandBeanList.get(groupPosition).getGroup().isGroupIsCoupon()) { groupHolder.tv_expand_get.setVisibility(View.VISIBLE); } else { groupHolder.tv_expand_get.setVisibility(View.GONE); } groupHolder.iv_expand_icon.setImageURI(Uri.parse(expandBeanList.get(groupPosition).getGroup().getGroupImage())); groupHolder.tv_expand_name.setText(expandBeanList.get(groupPosition).getGroup().getGroupName()); if (expandBeanList.get(groupPosition).getGroup().isGroupIsEdit()) { groupHolder.tv_expand_edit.setText(\"完成\"); } else { groupHolder.tv_expand_edit.setText(\"编辑\"); } groupHolder.tv_expand_edit.setOnClickListener(new GroupViewClick(groupPosition)); return convertView; } class GroupClick implements View.OnClickListener { private int groupPosition; public GroupClick(int groupPosition) { this.groupPosition = groupPosition; } @Override public void onClick(View v) { int groupSize = expandBeanList.size(); int childCount = expandBeanList.get(groupPosition).getChild().size(); if (!expandBeanList.get(groupPosition).getGroup().isGroupIsChecked()) { expandBeanList.get(groupPosition).getGroup().setGroupIsChecked(true); for (int i = 0; i < childCount; i++) { expandBeanList.get(groupPosition).getChild().get(i).setChildIsChecked(true); } boolean isAllChecked = true; for (int i = 0; i < groupSize; i++) { if (!expandBeanList.get(i).getGroup().isGroupIsChecked()) { isAllChecked = false; break; } } adapterCallback.callBack(isAllChecked, expandBeanList); } else { expandBeanList.get(groupPosition).getGroup().setGroupIsChecked(false); for (int i = 0; i < childCount; i++) { expandBeanList.get(groupPosition).getChild().get(i).setChildIsChecked(false); } adapterCallback.callBack(false, expandBeanList); } notifyDataSetChanged(); } } /** * 使某个组处于编辑状态 * * groupPosition组的位置 */ class GroupViewClick implements View.OnClickListener { private int groupPosition; public GroupViewClick(int groupPosition) { this.groupPosition = groupPosition; } @Override public void onClick(View v) { int groupId = v.getId(); boolean isAllChecked = true; if (groupId == groupHolder.tv_expand_edit.getId()) { if (expandBeanList.get(groupPosition).getGroup().isGroupIsEdit()) { expandBeanList.get(groupPosition).getGroup().setGroupIsEdit(false); } else { expandBeanList.get(groupPosition).getGroup().setGroupIsEdit(true); } int groupSize = expandBeanList.size(); for (int i = 0; i < groupSize; i++) { if (!expandBeanList.get(i).getGroup().isGroupIsChecked()) { isAllChecked = false; break; } } adapterCallback.callBack(isAllChecked, expandBeanList); notifyDataSetChanged(); } } } class ChildHolder { CheckBox check_child; TextView tv_expand_child_name; TextView tv_done_edit; SimpleDraweeView iv_expand_child_icon; LinearLayout layout_is_edit; Button btn_count_reduce; EditText content_fu_count; Button btn_count_add; TextView tv_count_edit; TextView tv_count_del; TextView tv_child_note; TextView tv_child_express; } @Override public View getChildView(final int groupPosition, final int childPosition, boolean isLastChild, View convertView, ViewGroup parent) { LinearLayout linearLayout = new LinearLayout(context); if (convertView == null) { convertView = LayoutInflater.from(context).inflate(R.layout.layout_child_expand, null); childHolder = new ChildHolder(); childHolder.check_child = (CheckBox) convertView.findViewById(R.id.check_child); childHolder.tv_expand_child_name = (TextView) convertView.findViewById(R.id.tv_expand_child_name); childHolder.tv_done_edit = (TextView) convertView.findViewById(R.id.tv_done_edit); childHolder.iv_expand_child_icon = (SimpleDraweeView) convertView.findViewById(R.id.iv_expand_child_icon); childHolder.layout_is_edit = (LinearLayout) convertView.findViewById(R.id.layout_is_edit); childHolder.btn_count_reduce = (Button) convertView.findViewById(R.id.btn_count_reduce); childHolder.content_fu_count = (EditText) convertView.findViewById(R.id.content_fu_count); childHolder.btn_count_add = (Button) convertView.findViewById(R.id.btn_count_add); childHolder.tv_count_edit = (TextView) convertView.findViewById(R.id.tv_count_edit); childHolder.tv_count_del = (TextView) convertView.findViewById(R.id.tv_count_del); childHolder.tv_child_note = (TextView) convertView.findViewById(R.id.tv_child_note); childHolder.tv_child_express = (TextView) convertView.findViewById(R.id.tv_child_express); convertView.setTag(childHolder); } else { childHolder = (ChildHolder) convertView.getTag(); } if (expandBeanList.get(groupPosition).getChild().get(childPosition).isChildIsChecked()) { childHolder.check_child.setChecked(true); } else { childHolder.check_child.setChecked(false); } childHolder.check_child.setOnClickListener(new ChildClick(groupPosition, childPosition)); if (expandBeanList.get(groupPosition).getGroup().isGroupIsEdit()) { childHolder.tv_done_edit.setVisibility(View.GONE); childHolder.layout_is_edit.setVisibility(View.VISIBLE); } else { childHolder.tv_done_edit.setVisibility(View.VISIBLE); childHolder.layout_is_edit.setVisibility(View.GONE); } childHolder.tv_expand_child_name.setText(expandBeanList.get(groupPosition).getChild().get(childPosition).getName()); childHolder.tv_done_edit.setText(\"X\" + expandBeanList.get(groupPosition).getChild().get(childPosition).getCount() + \" 个\"); childHolder.content_fu_count.setText(String.valueOf(expandBeanList.get(groupPosition).getChild().get(childPosition).getCount())); childHolder.iv_expand_child_icon.setImageURI(Uri.parse(expandBeanList.get(groupPosition).getChild().get(childPosition).getChildImage())); childHolder.btn_count_add.setOnClickListener(new ChildViewClick(groupPosition, childPosition)); childHolder.btn_count_reduce.setOnClickListener(new ChildViewClick(groupPosition, childPosition)); childHolder.tv_count_del.setOnClickListener(new DelChildViewClick(groupPosition, childPosition)); childHolder.tv_count_edit.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { ChangeDataBean changeDataBean = new ChangeDataBean(123, \"password\"); ChangeDataDialog changeDataDialog = new ChangeDataDialog(context, R.style.mystyle, R.layout.layout_dialog_input, changeDataBean, new ChangeDataDialog.InputListener() { @Override public void getNameAndPassword(String number, String password) { Toast.makeText(context, number + password, Toast.LENGTH_SHORT).show(); } }); changeDataDialog.getWindow().setGravity(Gravity.BOTTOM); changeDataDialog.show(); } }); if (expandBeanList.get(groupPosition).getChild().size() == childPosition + 1) { childHolder.tv_child_note.setVisibility(View.VISIBLE); childHolder.tv_child_express.setVisibility(View.VISIBLE); int groupsize = expandBeanList.get(groupPosition).getChild().size(); int count = 0; for (int i = 0; i < groupsize; i++) { if (expandBeanList.get(groupPosition).getChild().get(i).isChildIsChecked()) { count += expandBeanList.get(groupPosition).getChild().get(i).getCount(); } } childHolder.tv_child_note.setText(\"数量：\" + count + \"个\"); childHolder.tv_child_express.setText(\"快递费用：20元\"); } else { childHolder.tv_child_note.setVisibility(View.GONE); childHolder.tv_child_express.setVisibility(View.GONE); } return convertView; } class ChildClick implements View.OnClickListener { private int groupPosition; private int childPosition; public ChildClick(int groupPosition, int childPosition) { this.groupPosition = groupPosition; this.childPosition = childPosition; } @Override public void onClick(View v) { int groupSize = expandBeanList.size(); int childCount = expandBeanList.get(groupPosition).getChild().size(); boolean isAllSelect = true; if (!expandBeanList.get(groupPosition).getChild().get(childPosition).isChildIsChecked()) { expandBeanList.get(groupPosition).getChild().get(childPosition).setChildIsChecked(true); for (int i = 0; i < childCount; i++) { if (!expandBeanList.get(groupPosition).getChild().get(i).isChildIsChecked()) { isAllSelect = false; break; } } if (isAllSelect) { expandBeanList.get(groupPosition).getGroup().setGroupIsChecked(true); } else { expandBeanList.get(groupPosition).getGroup().setGroupIsChecked(false); } boolean isAllChecked = true; for (int i = 0; i < groupSize; i++) { if (!expandBeanList.get(i).getGroup().isGroupIsChecked()) { isAllChecked = false; break; } } adapterCallback.callBack(isAllChecked, expandBeanList); } else { expandBeanList.get(groupPosition).getChild().get(childPosition).setChildIsChecked(false); expandBeanList.get(groupPosition).getGroup().setGroupIsChecked(false); adapterCallback.callBack(false, expandBeanList); } notifyDataSetChanged(); } } /** * 删除childview * * groupPosition 组的位置 * childPosition 子的位置 */ class DelChildViewClick implements View.OnClickListener { private int groupPosition; private int childPosition; public DelChildViewClick(int groupPosition, int childPosition) { this.groupPosition = groupPosition; this.childPosition = childPosition; } @Override public void onClick(View v) { expandBeanList.get(groupPosition).getChild().remove(childPosition); if (expandBeanList.get(groupPosition).getChild().size() expandBeanList = new ArrayList(); private ExpandAdapter expandAdapter; private TextView tv_expand_price; private TextView tv_expand_commit; private CheckBox cb_expand_all; private boolean isAdapterAllChecked = false; private List< ExpandBean> myExpandBeanList; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_expand_list_view); Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); setSupportActionBar(toolbar); FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab); fab.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG) .setAction(\"Action\", null).show(); } }); initView(); initData(); } private void initView() { cb_expand_all = (CheckBox) findViewById(R.id.cb_expand_all); cb_expand_all.setOnClickListener(this); tv_expand_price = (TextView) findViewById(R.id.tv_expand_price); tv_expand_commit = (TextView) findViewById(R.id.tv_expand_commit); tv_expand_commit.setOnClickListener(this); expand_listview = (ExpandableListView) findViewById(R.id.expand_listview); expand_listview.setGroupIndicator(null); List< ChildItemBean> weiChildItemBeanList = new ArrayList(); for (int i = 1; i","tags":[]},{"title":"基于环信的Android聊天APP（三）","date":"2017-02-23T08:07:56.000Z","path":"2017/02/23/用环信来做一个聊天APP(三)/","text":"1.再来就是聊天列表页面的刷新 和qq类似，当收到消息的时候首页列表应该更新消息，还要去重，来看一下效果，感觉这里的重点就是ui更新， 去重，消息的显示。这里建议去看官方的Demo 2.看一下核心逻辑代码(如果用easeUI基本我这个就用不到了) import android.app.Activity; import android.content.Context; import android.util.Log; import android.util.Pair; import android.widget.Toast; import com.fanyafeng.wechat.chat.ChatBean; import com.fanyafeng.wechat.login.LoginContract; import com.hyphenate.EMMessageListener; import com.hyphenate.chat.EMClient; import com.hyphenate.chat.EMConversation; import com.hyphenate.chat.EMImageMessageBody; import com.hyphenate.chat.EMMessage; import com.hyphenate.chat.EMTextMessageBody; import org.json.JSONObject; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.List; import java.util.Map; import java.util.Set; import java.util.TreeSet; /** * Author： fanyafeng * Data： 17/2/20 上午11:20 * Email: fanyafeng@live.cn */ public class MainPresenter implements MainContract.Presenter, EMMessageListener { private Context context; private MainContract.View mainView; private EMMessageListener emMessageListener; private List< MainMessageBean> messageBeanList = new ArrayList(); public MainPresenter(Context context, MainContract.View mainView) { this.context = context; this.mainView = mainView; mainView.setPresenter(this); emMessageListener = this; } private void sortConversationByLastChatTime(List< Pair< Long, EMConversation>> conversationList) { Collections.sort(conversationList, new Comparator< Pair< Long, EMConversation>>() { @Override public int compare(final Pair< Long, EMConversation> con1, final Pair< Long, EMConversation> con2) { if (con1.first.equals(con2.first)) { return 0; } else if (con2.first.longValue() > con1.first.longValue()) { return 1; } else { return -1; } } }); } private List< EMConversation> loadConversationList() { // get all conversations Map< String, EMConversation> conversations = EMClient.getInstance().chatManager().getAllConversations(); List< Pair< Long, EMConversation>> sortList = new ArrayList< Pair< Long, EMConversation>>(); /** * lastMsgTime will change if there is new message during sorting * so use synchronized to make sure timestamp of last message won't change. */ synchronized (conversations) { for (EMConversation conversation : conversations.values()) { if (conversation.getAllMessages().size() != 0) { sortList.add(new Pair< Long, EMConversation>(conversation.getLastMessage().getMsgTime(), conversation)); } } } try { // Internal is TimSort algorithm, has bug sortConversationByLastChatTime(sortList); } catch (Exception e) { e.printStackTrace(); } List< EMConversation> list = new ArrayList< EMConversation>(); for (Pair< Long, EMConversation> sortItem : sortList) { list.add(sortItem.second); } return list; } @Override public void start() { EMClient.getInstance().chatManager().addMessageListener(emMessageListener); int conversationSize = loadConversationList().size(); Set< MainMessageBean> mainMessageBeanSet = new TreeSet(); for (int i = 0; i < conversationSize; i++) { EMConversation emConversation = loadConversationList().get(i); EMMessage emMessage = emConversation.getAllMessages().get(0); MainMessageBean mainMessageBean = new MainMessageBean(); mainMessageBean.setNickName(EMClient.getInstance().getCurrentUser().equals(emMessage.getTo()) ? emMessage.getFrom() : emMessage.getTo()); if (emMessage.getBody() instanceof EMTextMessageBody) { mainMessageBean.setMessageDetail(((EMTextMessageBody) emMessage.getBody()).getMessage()); } else if (emMessage.getBody() instanceof EMImageMessageBody) { mainMessageBean.setMessageDetail(\"[图片]\"); } mainMessageBean.setMessageTime(emMessage.getMsgTime()); mainMessageBeanSet.add(mainMessageBean); } messageBeanList.addAll(new ArrayList(mainMessageBeanSet)); mainView.initRecycleView(messageBeanList); } @Override public void initRecycleView() { } @Override public void removeMessageListener() { EMClient.getInstance().chatManager().removeMessageListener(emMessageListener); } @Override public void onMessageReceived(List< EMMessage> list) { Set< MainMessageBean> mainMessageBeanSet = new TreeSet(messageBeanList); for (EMMessage emMessage : list) { MainMessageBean mainMessageBean = new MainMessageBean(); mainMessageBean.setNickName(emMessage.getFrom()); mainMessageBean.setMessageTime(emMessage.getMsgTime()); if (emMessage.getBody() instanceof EMTextMessageBody) { mainMessageBean.setMessageDetail(((EMTextMessageBody) emMessage.getBody()).getMessage()); } mainMessageBeanSet.add(mainMessageBean); } messageBeanList.clear(); messageBeanList.addAll(new ArrayList(mainMessageBeanSet)); ((Activity) context).runOnUiThread(new Runnable() { @Override public void run() { mainView.notifyChanged(); } }); } @Override public void onCmdMessageReceived(List< EMMessage> list) { } @Override public void onMessageRead(List< EMMessage> list) { } @Override public void onMessageDelivered(List< EMMessage> list) { } @Override public void onMessageChanged(EMMessage emMessage, Object o) { } }","tags":[]},{"title":"基于环信的Android聊天APP（二）","date":"2017-02-23T08:00:40.000Z","path":"2017/02/23/用环信来做一个聊天APP(二)/","text":"1.开始着手一个一对一的信息发送 官方文档 这里我先看的收消息，因为可以在后台建一个用户并且直接有发送消息的按钮，这样测试比较简单一点，上文中 已经把配置，sdk都搞定了，下面来正式写demo，首先就是app的初始化，就直接放在application中了。 // 记录是否已经初始化 private boolean isInit = false; @Override public void onCreate() { super.onCreate(); initFresco(); initEasemob(); } private void initFresco() { Fresco.initialize(this, FrescoConfig.getsImagePipelineConfig(this)); } private void initEasemob() { // 获取当前进程 id 并取得进程名 int pid = android.os.Process.myPid(); String processAppName = getAppName(pid); /** * 如果app启用了远程的service，此application:onCreate会被调用2次 * 为了防止环信SDK被初始化2次，加此判断会保证SDK被初始化1次 * 默认的app会在以包名为默认的process name下运行，如果查到的process name不是app的process name就立即返回 */ if (processAppName == null || !processAppName.equalsIgnoreCase(this.getPackageName())) { // 则此application的onCreate 是被service 调用的，直接返回 return; } if (isInit) { return; } /** * SDK初始化的一些配置 * 关于 EMOptions 可以参考官方的 API 文档 * http://www.easemob.com/apidoc/android/chat3.0/classcom_1_1hyphenate_1_1chat_1_1_e_m_options.html */ EMOptions options = new EMOptions(); // 设置Appkey，如果配置文件已经配置，这里可以不用设置 // options.setAppKey(\"lzan13#hxsdkdemo\"); // 设置自动登录 options.setAutoLogin(true); // 设置是否需要发送已读回执 options.setRequireAck(true); // 设置是否需要发送回执，TODO 这个暂时有bug，上层收不到发送回执 options.setRequireDeliveryAck(true); // 设置是否需要服务器收到消息确认 options.setRequireDeliveryAck(true); // 收到好友申请是否自动同意，如果是自动同意就不会收到好友请求的回调，因为sdk会自动处理，默认为true options.setAcceptInvitationAlways(false); // 设置是否自动接收加群邀请，如果设置了当收到群邀请会自动同意加入 options.setAutoAcceptGroupInvitation(false); // 设置（主动或被动）退出群组时，是否删除群聊聊天记录 options.setDeleteMessagesAsExitGroup(false); // 设置是否允许聊天室的Owner 离开并删除聊天室的会话 options.allowChatroomOwnerLeave(true); // 调用初始化方法初始化sdk EMClient.getInstance().init(this, options); // 设置开启debug模式 EMClient.getInstance().setDebugMode(true); // 设置初始化已经完成 isInit = true; } /** * 根据Pid获取当前进程的名字，一般就是当前app的包名 * * @param pid 进程的id * @return 返回进程的名字 */ private String getAppName(int pid) { String processName = null; ActivityManager activityManager = (ActivityManager) this.getSystemService(Context.ACTIVITY_SERVICE); List list = activityManager.getRunningAppProcesses(); Iterator i = list.iterator(); while (i.hasNext()) { ActivityManager.RunningAppProcessInfo info = (ActivityManager.RunningAppProcessInfo) (i.next()); try { if (info.pid == pid) { // 根据进程的信息获取当前进程的名字 processName = info.processName; // 返回当前进程名 return processName; } } catch (Exception e) { e.printStackTrace(); } } // 没有匹配的项，返回为null return null; } 2.看一下聊天页面(我没有用easeUI，太大了。。。) &nbsp;&nbsp;&nbsp;&nbsp;2.1 因为我使用了mvp模式，所以目录结构可能和平常的不一样，而且我这个逻辑处理都是在P中操作的，上的话就上一下逻辑核心 代码，别的都托管到Github上了。 &nbsp;&nbsp;&nbsp;&nbsp;2.2 看一下处理业务逻辑的核心代码 import android.app.Activity; import android.content.Context; import android.content.Intent; import com.fanyafeng.wechat.util.StringUtil; import com.hyphenate.EMMessageListener; import com.hyphenate.chat.EMClient; import com.hyphenate.chat.EMConversation; import com.hyphenate.chat.EMImageMessageBody; import com.hyphenate.chat.EMMessage; import com.hyphenate.chat.EMTextMessageBody; import java.util.ArrayList; import java.util.List; /** * Author： fanyafeng * Data： 17/2/21 上午11:29 * Email: fanyafeng@live.cn */ public class ChatPresenter implements ChatContract.Presenter, EMMessageListener { private Context context; private ChatContract.View chatView; private Intent intent; private EMMessageListener emMessageListener; private List< ChatBean> chatBeanList = new ArrayList(); public ChatPresenter(Context context, ChatContract.View chatView) { this.context = context; this.chatView = chatView; } @Override public void start() { emMessageListener = this; EMClient.getInstance().chatManager().addMessageListener(emMessageListener); intent = chatView.initIntent(); EMConversation emConversation = EMClient.getInstance().chatManager().getConversation(intent.getStringExtra(\"from\")); if (emConversation != null) { List< EMMessage> emMessageList = emConversation.getAllMessages(); for (EMMessage emMessage : emMessageList) { ChatBean chatBean = new ChatBean(); if (emMessage.getBody() instanceof EMTextMessageBody) { chatBean.setTextMessage(((EMTextMessageBody) emMessage.getBody()).getMessage()); } else if (emMessage.getBody() instanceof EMImageMessageBody) { chatBean.setTextMessage(\"[图片]\"); } chatBean.setType(EMClient.getInstance().getCurrentUser().equals(emMessage.getFrom()) ? 1 : 0); chatBeanList.add(chatBean); } } chatView.initRecycleView(chatBeanList); if (chatBeanList.size() > 0) { chatView.scrollToPosition(chatBeanList.size() - 1); } } @Override public void onMessageReceived(List< EMMessage> list) { for (EMMessage emMessage : list) { ChatBean chatBean = new ChatBean(); if (emMessage.getBody() instanceof EMTextMessageBody) { chatBean.setTextMessage(((EMTextMessageBody) emMessage.getBody()).getMessage()); } if (intent.getStringExtra(\"from\").equals(emMessage.getFrom())) { chatBeanList.add(chatBean); } } ((Activity) context).runOnUiThread(new Runnable() { @Override public void run() { chatView.notifyChanged(); chatView.scrollToPosition(chatBeanList.size() - 1); } }); } @Override public void onCmdMessageReceived(List< EMMessage> list) { } @Override public void onMessageRead(List< EMMessage> list) { } @Override public void onMessageDelivered(List< EMMessage> list) { } @Override public void onMessageChanged(EMMessage emMessage, Object o) { } @Override public void removeMessageListener() { EMClient.getInstance().chatManager().removeMessageListener(emMessageListener); } @Override public void sendMessage() { if (!StringUtil.isNullOrEmpty(chatView.getMessage())) { EMMessage emMessage = EMMessage.createTxtSendMessage(chatView.getMessage(), chatView.initIntent().getStringExtra(\"from\")); EMClient.getInstance().chatManager().sendMessage(emMessage); ChatBean chatBean = new ChatBean(); chatBean.setTextMessage(chatView.getMessage()); chatBean.setType(1); chatBeanList.add(chatBean); chatView.notifyChanged(); chatView.scrollToPosition(chatBeanList.size() - 1); chatView.clearInput(); } else { //消息为空 } } } 3.看一下运行效果，我这里是用的两个账号测试的（一个动图，一个非动图） 到此，单聊算是做完了，仅仅是文字，没有富媒体","tags":[]},{"title":"基于环信的Android聊天APP（一）","date":"2017-02-23T07:16:27.000Z","path":"2017/02/23/用环信来做一个聊天APP(一)/","text":"1.有个需求需要聊天，然后想做个demo &nbsp;&nbsp;&nbsp;&nbsp;本来打算用网易云的，然后查了一下资料（我没有做实际操作，根据查阅 的资料做的决定，可能有点武断），最后选择了环信(以下是我查阅的几个资料)。 最近要用到IM，比较了下LeanCloud、融云、环信，请问LeanCloud有什么优势？ 哪款即时通讯 (IM) 服务最稳定？ 第三方im系统调研 2.一般接入第三方第一件事就是注册，然后看文档 &nbsp;&nbsp;&nbsp;&nbsp;环信的注册不是很麻烦，最主要的就是手机号，不用身份证实名制，注册完成以后就可以添加自己的应用了，然后去申请key，他们的key 不是根据签名申请的，可以支持debug，很方便调试。有点坑的地方就是如果你选择基于3.x的版本进行开发去查看相应的文档的话，你会发现好奇怪，为啥有的方法不对，有的还有bug， 这个的话大体的逻辑是对的，估计是因为版本升级文档没有及时更新吧，bug就是后台是用admin发送一条数据的时候客户端会收到两条，但是用户和用户之间通讯是没问题的，这个问题困扰了我 半个下午和一个上午，我实在看不出我代码是那错了，去找客服，他说是他们后台的bug。再有就是有些需要加判断处理的他的官方代码并没有做，还需要自己多多测试，总是来说坑还是有的， 需要自己多多实践。 &nbsp;&nbsp;&nbsp;&nbsp;详情请点击此处 3.开始进行项目的操作 &nbsp;&nbsp;&nbsp;&nbsp;我当时也不知道咋回事，选择用mvp做的demo，进坑的机会发现明显多了，不过这样做对mvp更熟悉了。 我是安卓，这里就说一下android的吧，官方文档请点此处 官方的文档写的挺清晰地，但是有些还是需要多多注意。官方支持jar包和在线的gradle依赖，我刚开始因为需要下载so文件，然后用的jar包，后来就犯懒没后替换成gradle，说一下需要 注意的gradle的东西。 &nbsp;&nbsp;&nbsp;&nbsp;以下的代码需要放在根目录的build.gradle repositories { maven { url \"https://raw.githubusercontent.com/HyphenateInc/Hyphenate-SDK-Android/master/repository\" } } &nbsp;&nbsp;&nbsp;&nbsp;以下的代码放在module的build.gradle中 android { //use legacy for android 6.0 useLibrary 'org.apache.http.legacy' } dependencies { compile 'com.android.support:appcompat-v7:23.4.0' //Optional compile for GCM (Google Cloud Messaging). compile 'com.google.android.gms:play-services-gcm:9.4.0' compile 'com.hyphenate:hyphenate-sdk:3.2.3' } 4.开始构建自己的app 先来看一下我的目录结构,剩下的需要注意的就是配置和混淆 5.然后运行app，能跑起来就是ok的,这里写了几个死界面","tags":[]},{"title":"测试","date":"2017-02-17T07:09:09.000Z","path":"2017/02/17/我的测试/","text":"$(document).ready(function(){ $(\"#btn1\").click(function(){ $(\"#p\").append(\" Appended text.\"); }); $(\"#btn2\").click(function(){ $(\"ol\").append(\"Appended item\"); }); }); 点击执行js var i=0; function MyAutoRun() { x=document.getElementById(\"a\"); var info=\"大家好\" var infoLength=info.length; $(\"#a\").append(info.charAt(i)); if(i","tags":[]},{"title":"回顾2016","date":"2017-02-13T09:18:43.000Z","path":"2017/02/13/回顾2016/","text":"var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%3Dprompt%28%22%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%20%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%5R\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%3Dprompt%28%22%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%20%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%3Dprompt%49%22%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%20%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F94%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0B%20%21var%20password%3Dprompt%28%21%u8BF7%u8F93%u5165%u5BC6%u7801%21%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%21%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) 各中酸甜苦辣用个表情概括吧~~~ var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%3Dprompt%28%21%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%21%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%32Dprompt%28%21%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%21%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0A%20%21var%20password%3Dprompt%28%21%u8BF7%u8F93%u5165%u5BC6%u7801%21%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%21%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) 输入密码进入详情页： 请输入密码进入 var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%3Dprompt%28%22%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%20%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%5R\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%3Dprompt%28%22%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%20%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%3Dprompt%49%22%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%20%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F94%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0B%20%21var%20password%3Dprompt%28%21%u8BF7%u8F93%u5165%u5BC6%u7801%21%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%21%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%29%7B%0A%20%20var%20password%3Dprompt%28%22%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u4E0D%u60F3%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%20%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%3Dprompt%28%21%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%21%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0A%20%20var%20password%32Dprompt%28%21%u8BF7%u8F93%u5165%u5BC6%u7801%22%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%21%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code) var code=unescape(\"function%20checkInput%28%28%7B%0A%20%21var%20password%3Dprompt%28%21%u8BF7%u8F93%u5165%u5BC6%u7801%21%2C%22%u5BC6%u7801%22%29%0A%20%20if%20%28password%21%3Dnull%20%26%26%20password%21%3D%22%22%20%26%26%20password%3D%3D%22%u53BB%u56DE%u5FC6%u7684%u56DE%u5FC6%22%29%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u6B63%u786E%22%29%3B%0A%21%20%20%20%7Delse%7B%0A%20%20%20%20alert%28%22%u60A8%u8F93%u5165%u7684%u5BC6%u7801%u4E0D%u6B63%u786E%22%29%3B%0A%20%20%20%20%7D%0A%20%20%7D\"); eval(code)","tags":[]},{"title":"JavaScript简介","date":"2017-02-06T09:34:26.000Z","path":"2017/02/06/JavaScript简介/","text":"1.javaScript:更改html中内容或样式 document.write(\"This is a heading\"); 执行 function writeText(){ x=document.getElementById(\"a\"); x.innerHTML=\"This is a heading\"; } 改变颜色，我比较喜欢Material Design中的蓝色 执行 function changeColor(){ x=document.getElementById(\"b\"); x.style.color=\"#303F9F\"; } 改变图像 改变图片 function changeImg(){ element=document.getElementById('d'); if(element.src.match(\"alipay\")){ element.src=\"/images/fanyafeng_wechat.jpeg\"; }else{ element.src=\"/images/fanyafeng_alipay.jpeg\"; } } 校验输入 校验 function checkInput(){ var x=document.getElementById(\"f\").value; if(x==\"\" || isNaN(x)){ alert(\"输入非数字\"); }else{ alert(\"输入为数字\"); } } 2.通过javascript代码改变一些控件的属性 测试汉字获取get请求 function GetRequests(){ var url=location.search; if(url.indexOf(\"?\")!=-1){ var str=url.substr(1); strs=str.split(\"=\"); alert(strs[1]); } }","tags":[]},{"title":"视频","date":"2017-02-06T09:33:43.000Z","path":"2017/02/06/VideoPlayer/","text":"function changeVideoSource(){ var videoplayer=document.getElementById(\"videoplayer\"); videoplayer.src=\"http://ic.snssdk.com/neihan/video/playback/?video_id=dbbc0b0735a646c98a46b1d8c9ebeef9&quality=480p&line=0&is_gif=0.mp4\"; videoplayer.load(); } function getVideoUrl(){ alert(\"你好你好\"); var s= $.get('http://ic.snssdk.com/neihan/video/playback/?video_id=dbbc0b0735a646c98a46b1d8c9ebeef9&quality=480p&line=0&is_gif=0.mp4'); alert(s); }","tags":[]},{"title":"自定义折线图（二）","date":"2017-02-06T02:33:31.000Z","path":"2017/02/06/BrokenLineView_02/","text":"1.上文自定义折线图有bug，当时没细看，写自定义的时候突然惊醒了 &nbsp;&nbsp;&nbsp;&nbsp;因为x和y轴需要标刻度，然后把坐标轴的原点没有定在左下角，而是向左上进行了平移，所以同时还需要把折线的x点同时加上坐标轴向左移动的距离。 2.上文中思路也说了，下面来定义一下需要的东西。 &nbsp;&nbsp;&nbsp;&nbsp;这次需要动态画曲线，阴影，标刻度，所以这些都是不确定的，我一般都是定义相应的set方法。我这里定义了四个set方法 2.1 首先是需要定义一个bean，自定义的点：BrokenLinePointBean （这里需要留意的是y是百分比，x基本没有用到） 2.2 画曲线所需要的折点：setPointList(List points) 2.3 画阴影所需要的两个点，主要是要确定y轴范围：setShapePaints(BrokenLinePointBean pointY1, BrokenLinePointBean pointY2) 2.4 x轴坐标标刻度：setXIndex(List XindexString) 2.5 y轴坐标标刻度：setYIndex(List YindexString) 3.先来看一下运行效果 4.看一下核心代码，主要是两块吧 &nbsp;&nbsp;&nbsp;&nbsp;4.1阴影绘制 if (PointY1.y > -1 && PointY2.y > -1) { canvas.drawRect(indexWidth, PointY1.y * height, width, PointY2.y * height, shapePaint); //y轴坐标1 Paint paintY1 = new Paint(Paint.ANTI_ALIAS_FLAG); paintY1.setTextSize(30); paintY1.setAntiAlias(true); Rect rectY1 = new Rect(0, (int) (PointY1.y * height - 10), (int) indexWidth, (int) (PointY1.y * height + 10));//折线为圈，需要减去半径 paintY1.setColor(Color.WHITE); canvas.drawRect(rectY1, paintY1); Paint.FontMetricsInt fontMetricsIntY1 = paintY1.getFontMetricsInt(); int baseLineY1 = (rectY1.bottom + rectY1.top - fontMetricsIntY1.bottom - fontMetricsIntY1.top) / 2; paintY1.setTextAlign(Paint.Align.CENTER); paintY1.setColor(Color.BLACK); canvas.drawText(\"y1点\", rectY1.centerX(), baseLineY1, paintY1); //y轴坐标2 Paint paintY2 = new Paint(Paint.ANTI_ALIAS_FLAG); paintY2.setTextSize(30); paintY2.setAntiAlias(true); Rect rectY2 = new Rect(0, (int) (PointY2.y * height - 10), (int) indexWidth, (int) (PointY2.y * height + 10));//折线为圈，需要减去半径 paintY2.setColor(Color.WHITE); canvas.drawRect(rectY2, paintY2); Paint.FontMetricsInt fontMetricsIntY2 = paintY2.getFontMetricsInt(); int baseLineY2 = (rectY2.bottom + rectY2.top - fontMetricsIntY2.bottom - fontMetricsIntY2.top) / 2; paintY2.setTextAlign(Paint.Align.CENTER); paintY2.setColor(Color.BLACK); canvas.drawText(\"y2点\", rectY2.centerX(), baseLineY2, paintY2); } &nbsp;&nbsp;&nbsp;&nbsp;4.1折线以及x，y轴绘制 int size = points.size(); if (size != 0) { //size+1份，每份长度 float eachLength = pWidth / (size + 1); for (int i = 0; i < size; i++) { float pointX1 = indexWidth + eachLength * (i + 1); float pointY1 = points.get(i).y * height; if (i != size - 1) { float pointX2 = indexWidth + eachLength * (i + 2); float pointY2 = points.get(i + 1).y * height; canvas.drawLine(pointX1, pointY1, pointX2, pointY2, pointPaint); canvas.drawCircle(pointX2, pointY2, 12, bigCirclePaint); canvas.drawCircle(pointX2, pointY2, 10, circlePaint); } canvas.drawCircle(pointX1, pointY1, 12, bigCirclePaint); canvas.drawCircle(pointX1, pointY1, 10, circlePaint); //折点标字 Paint paintBroken = new Paint(Paint.ANTI_ALIAS_FLAG); paintBroken.setAntiAlias(true); paintBroken.setTextSize(30); Rect rectBroken = new Rect((int) pointX1 - 50, (int) pointY1 - 70, (int) pointX1 + 50, (int) pointY1 - 20);//折线为圈，需要减去半径 paintBroken.setColor(Color.TRANSPARENT); canvas.drawRect(rectBroken, paintBroken); Paint.FontMetricsInt fontMetricsIntBroken = paintBroken.getFontMetricsInt(); int baseLineBroken = (rectBroken.bottom + rectBroken.top - fontMetricsIntBroken.bottom - fontMetricsIntBroken.top) / 2; paintBroken.setTextAlign(Paint.Align.CENTER); paintBroken.setColor(Color.BLACK); canvas.drawText(String.valueOf(points.get(i).y), rectBroken.centerX(), baseLineBroken, paintBroken); //x刻度 Paint paintBrokenX = new Paint(Paint.ANTI_ALIAS_FLAG); paintBrokenX.setAntiAlias(true); paintBrokenX.setTextSize(30); Rect rectBrokenX = new Rect((int) pointX1 - 50, (int) height, (int) pointX1 + 50, (int) (height + indexWidth));//折线为圈，需要减去半径 paintBrokenX.setColor(Color.TRANSPARENT); canvas.drawRect(rectBrokenX, paintBrokenX); Paint.FontMetricsInt fontMetricsIntBrokenX = paintBrokenX.getFontMetricsInt(); int baseLineBrokenX = (rectBrokenX.bottom + rectBrokenX.top - fontMetricsIntBrokenX.bottom - fontMetricsIntBrokenX.top) / 2; paintBrokenX.setTextAlign(Paint.Align.CENTER); paintBrokenX.setColor(Color.BLACK); canvas.drawText(XindexString.size() > 0 ? XindexString.get(i) : String.valueOf(i + 1), rectBrokenX.centerX(), baseLineBrokenX, paintBrokenX); //y刻度 Paint paintBrokenY = new Paint(Paint.ANTI_ALIAS_FLAG); paintBrokenY.setTextSize(30); paintBrokenY.setAntiAlias(true); Rect rectBrokenY = new Rect(0, (int) pointY1 - 10, (int) indexWidth, (int) pointY1 + 10);//折线为圈，需要减去半径 paintBrokenY.setColor(Color.WHITE); canvas.drawRect(rectBrokenY, paintBrokenY); Paint.FontMetricsInt fontMetricsIntBrokenY = paintBrokenY.getFontMetricsInt(); int baseLineBrokenY = (rectBrokenY.bottom + rectBrokenY.top - fontMetricsIntBrokenY.bottom - fontMetricsIntBrokenY.top) / 2; paintBrokenY.setTextAlign(Paint.Align.CENTER); paintBrokenY.setColor(Color.BLACK); canvas.drawText(YindexString.size() > 0 ? YindexString.get(i) : String.valueOf(i + 1), rectBrokenY.centerX(), baseLineBrokenY, paintBrokenY); } } //x轴 轴应该最后画 canvas.drawLine(indexWidth, height, width, height, XPaint); //y轴 canvas.drawLine(indexWidth, 0, indexWidth, height, YPaint); 5.项目源码（github） 折线图：https://github.com/1181631922/BrokenLineView","tags":[]},{"title":"Js轮播图（一）","date":"2017-02-05T07:36:52.000Z","path":"2017/02/05/SlideShow_01/","text":"body{background: #f4f4f4;} #container{width: 100%;height: 553px;position:relative;margin-right: auto;margin-left: auto;vertical-align:middle;} #imglist{margin: auto;position: absolute;top: 0; left: 0; bottom: 0; right: 0;} #buttons,.slidpic{display: none;} .slidpic{position: absolute;opacity:0} .slidpic:first-child{display: block;opacity: 1;} #buttons{display: block;} #buttons i{width:30px; color:white;height:60px;line-height:60px; background: #333;cursor: pointer;opacity: 0.2;filter:alpha(opacity:20);font-family: simsun;display: block;text-align: center;font-size: 22px;font-weight: normal;font-style: normal;-moz-user-select: none;-webkit-user-select: none; -ms-user-select: none;} #buttons i:hover{opacity: 0.4;filter:alpha(opacity:40);} #prev{position: absolute;z-index: 3;top: 230px;left: 30px;color: #fff;} #next{position: absolute;z-index: 3;top: 230px;right: 30px;color: #fff;} #slidot{position: absolute;bottom: 40px;left:340px;z-index: 3;margin: 0;padding: 0;} #slidot li{list-style: none;display: inline-block;width: 14px;height: 14px;background:gray ;border-radius:100% ;margin: 0 4px;*display:inline;*zoom:1;} #slidot li:hover{background: #3b0;cursor: pointer;} #slidot li.on{background: blue;} window.onload=function(){ //定义判断添加删除元素class方法 var hasClass=function(obj,cls){ return obj.className.match(new RegExp('(^|\\\\s)' + cls + '(\\\\s|$)')) } var addClass=function(obj,cls){ if(!hasClass(obj,cls)){ if(obj.className.length==0){obj.className=cls;} else{obj.className+=\" \"+cls;} } } var rvClass=function(obj,cls){ if(hasClass(obj,cls)){ var argu=new RegExp('(^|\\\\s)' + cls + '(\\\\s|$)'); obj.className=obj.className.replace(argu,\"\"); } } //开始 var prev=document.getElementById(\"prev\"), next=document.getElementById(\"next\"), imglist=document.getElementById(\"imglist\").getElementsByTagName(\"div\"), dot=document.getElementById(\"slidot\").getElementsByTagName(\"li\"), n=imglist.length, index=0, fade=false; // 设置透明度 渐变 var setOpacity=function(obj,opa){ if(obj.filters){obj.style.filter=\"alpha(opacity:\"+opa+\")\";} else{obj.style.opacity=opa/100;} } var fadeIn=function(obj){ fade=true; obj.style.display=\"block\"; var opa=0; (function func(){ if(opa0){opa-=10;setOpacity(obj,opa);setTimeout(func,30)} else{obj.style.display=\"none\";} })(); } // 同步点亮小圆点 function lightdot(){ for (var i=0;i","tags":[]},{"title":"自定义折线图（一）","date":"2017-02-05T03:47:54.000Z","path":"2017/02/05/BrokenLineView_01/","text":"1.先看一下要实现的大致效果图 document.write(\"下图为要实现的设计图，点击后为初步实现的效果图。\"); 点击这里 function changeImage(){ element=document.getElementById('brokenLine'); if(element.src.match(\"brokenlineview1\")){ element.src=\"/images/2017-02-05-brokenlineview2.png\"; }else{ element.src=\"/images/2017-02-05-brokenlineview1.jpg\"; } } 2.说一下实现思路 2.1 首先是先画一个坐标系，但是需要给标尺留出距离，我刚开始的时候就忘了留距离，后来又改的 2.2 再有就是画一个折线图，折线图需要描点和标值 2.3 需要画一个矩形范围 3.在写代码之前先来考虑一下需要什么变量 3.1 自定义view的话首先需要确定view的宽高，还有就是他的原点是相对于自己的 3.2 定义画笔，我刚开始的时候没有确定需要定义几个，需要的话我就去定义 3.3 标尺，以及折线上字的位置 注：注意一些变量是可以定义成静态的，为了效率 4.现在开始着手写代码 &nbsp;&nbsp;&nbsp;&nbsp;4.1 先来确定view的宽高位置 if (width == 0) {//宽 width = getWidth(); pWidth = width - indexWidth; } if (height == 0) {//高 height = getHeight() - indexWidth; } &nbsp;&nbsp;&nbsp;&nbsp;4.2 标字，这里就举一个例子 //折点标字 Paint paintX1 = new Paint(Paint.ANTI_ALIAS_FLAG); paintX1.setAntiAlias(true); paintX1.setTextSize(30); Rect rect = new Rect((int) x1 - 50, (int) y1 - 70, (int) x1 + 50, (int) y1 - 20);//折线为圈，需要减去半径 paintX1.setColor(Color.WHITE); canvas.drawRect(rect, paintX1); Paint.FontMetricsInt fontMetricsIntX1 = paintX1.getFontMetricsInt(); int baseLineX1 = (rect.bottom + rect.top - fontMetricsIntX1.bottom - fontMetricsIntX1.top) / 2; paintX1.setTextAlign(Paint.Align.CENTER); paintX1.setColor(Color.BLACK); canvas.drawText(\"26.9\", rect.centerX(), baseLineX1, paintX1); &nbsp;&nbsp;&nbsp;&nbsp;4.3 再来就是画折线，折线的话先确定折点，然后连线就可以了，我这里是暂时定死的五等分 //y轴第一个点 float pointY1y = height / 3; float pointY1x = indexWidth; //y轴第二个点 float pointY2y = height * 2 / 3; float pointY2x = indexWidth; canvas.drawRect(indexWidth, pointY1y, width, pointY2y, shapePaint); //x轴第一个点,y轴第一个 float x1 = pWidth / 6; float y1 = height / 6; //x轴第二个点 float x2 = pWidth / 3; float y2 = height / 3; //x轴第三个点 float x3 = pWidth / 2; float y3 = height / 2; //x轴第四个点 float x4 = 2 * pWidth / 3; float y4 = height / 3; //x轴第五个点 float x5 = 5 * pWidth / 6; float y5 = 5 * height / 6; //以下是折线图 canvas.drawLine(x1, y1, x2, y2, pointPaint); canvas.drawLine(x2, y2, x3, y3, pointPaint); canvas.drawLine(x3, y3, x4, y4, pointPaint); canvas.drawLine(x4, y4, x5, y5, pointPaint); canvas.drawCircle(x1, y1, 12, bigCirclePaint); canvas.drawCircle(x1, y1, 10, circlePaint); canvas.drawCircle(x2, y2, 12, bigCirclePaint); canvas.drawCircle(x2, y2, 10, circlePaint); canvas.drawCircle(x3, y3, 12, bigCirclePaint); canvas.drawCircle(x3, y3, 10, circlePaint); canvas.drawCircle(x4, y4, 12, bigCirclePaint); canvas.drawCircle(x4, y4, 10, circlePaint); canvas.drawCircle(x5, y5, 12, bigCirclePaint); canvas.drawCircle(x5, y5, 10, circlePaint); &nbsp;&nbsp;&nbsp;&nbsp;4.4 给x和y轴标刻度 // y轴坐标 Paint paintY1 = new Paint(Paint.ANTI_ALIAS_FLAG); paintY1.setTextSize(30); paintY1.setAntiAlias(true); Rect rectY1 = new Rect(0, (int) pointY1y - 30, (int) indexWidth, (int) pointY1y + 30);//折线为圈，需要减去半径 paintY1.setColor(Color.WHITE); canvas.drawRect(rectY1, paintY1); Paint.FontMetricsInt fontMetricsIntY1 = paintY1.getFontMetricsInt(); int baseLineY1 = (rectY1.bottom + rectY1.top - fontMetricsIntY1.bottom - fontMetricsIntY1.top) / 2; paintY1.setTextAlign(Paint.Align.CENTER); paintY1.setColor(Color.BLACK); canvas.drawText(\"26.9\", rectY1.centerX(), baseLineY1, paintY1); //x轴坐标 Paint paintY2 = new Paint(Paint.ANTI_ALIAS_FLAG); paintY2.setTextSize(30); paintY2.setAntiAlias(true); Rect rectY2 = new Rect(0, (int) pointY2y - 30, (int) indexWidth, (int) pointY2y + 30);//折线为圈，需要减去半径 paintY2.setColor(Color.WHITE); canvas.drawRect(rectY2, paintY2); Paint.FontMetricsInt fontMetricsIntY2 = paintY2.getFontMetricsInt(); int baseLineY2 = (rectY2.bottom + rectY2.top - fontMetricsIntY2.bottom - fontMetricsIntY2.top) / 2; paintY2.setTextAlign(Paint.Align.CENTER); paintY2.setColor(Color.BLACK); canvas.drawText(\"26.9\", rectY2.centerX(), baseLineY2, paintY2); 5.我把代码托管到github上了，以下是github地址 折线图：https://github.com/1181631922/BrokenLineView","tags":[]},{"title":"使用hexo搭建自己的博客（二）","date":"2017-02-04T09:57:17.000Z","path":"2017/02/04/hexo_02/","text":"1.上文中bolg已经可以跑起来了，剩下的就是配置成自己想要的效果，先来配置hexo，以下是我的配置，我是根据英文名来理解是做什么的 # Site title: 樊亚风的博客 subtitle: To be, or not to be! description: To be, or not to be! author: 樊亚风 language: zh_CN timezone: # URL ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/' url: http://yoursite.com root: / permalink: :year/:month/:day/:title/ permalink_defaults: # Directory source_dir: source public_dir: public tag_dir: tags archive_dir: archives category_dir: categories code_dir: downloads/code i18n_dir: :lang skip_render: # Writing new_post_name: :title.md # File name of new posts default_layout: post titlecase: false # Transform title into titlecase external_link: true # Open external links in new tab filename_case: 0 render_drafts: false post_asset_folder: false relative_link: false future: true highlight: enable: true line_number: true auto_detect: false tab_replace: # Category & Tag default_category: uncategorized category_map: tag_map: # Date / Time format ## Hexo uses Moment.js to parse and display date ## You can customize the date format as defined in ## http://momentjs.com/docs/#/displaying/format/ date_format: YYYY-MM-DD time_format: HH:mm:ss # Pagination ## Set per_page to 0 to disable pagination per_page: 10 pagination_dir: page # Extensions ## Plugins: https://hexo.io/plugins/ ## Themes: https://hexo.io/themes/ theme: yilia # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: https://github.com/1181631922/1181631922.github.io.git branch: master jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 2.再来看一下主题的修改 &nbsp;&nbsp;&nbsp;&nbsp; 2.1 我的主题用的是yilia，主题的话可以从 hexo主题（点击这里）里面找。 3.看一下yilia主题的配置文件以及相应的修改 # Header menu: 主页: / 所有文章: /archives #随笔: /tags/随笔/ # SubNav subnav: github: \"https://github.com/1181631922/\" weibo: \"http://www.weibo.com/3571009497/profile?topnav=1&wvr=6&is_all=1\" #rss: \"#\" zhihu: \"https://www.zhihu.com/people/xiaofan-56/activities\" #qq: \"#\" #weixin: \"#\" #jianshu: \"#\" #douban: \"#\" #mail: \"fanyafeng@live.cn\" #facebook: \"#\" #google: \"#\" #twitter: \"#\" #linkedin: \"#\" rss: /atom.xml # 是否需要修改 root 路径 # 如果您的网站存放在子目录中，例如 http://yoursite.com/blog， # 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。 root: # Content # 文章太长，截断按钮文字 excerpt_link: more # 文章卡片右下角常驻链接，不需要请设置为false show_all_link: '展开全文' # 数学公式 mathjax: false # 是否在新窗口打开链接 open_in_new: false # 打赏 # 请在需要打赏的文章的md文件头部，设置属性reward: true # 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏 reward_type: 2 # 打赏wording reward_wording: '谢谢你请我吃糖果' # 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg alipay: \"http://a1.qpic.cn/psb?/V12cYG6y1Idi7M/5G5.BS4uzgGQEaF5oI99DlGcxmAM5*BcvT4RcGO3t6k!/b/dCABAAAAAAAA&ek=1&kp=1&pt=0&bo=YwJbAgAAAAAFFww!&tm=1485068400&sce=60-3-3&rf=viewer_4\" # 微信二维码图片地址 weixin: \"http://a3.qpic.cn/psb?/V12cYG6y1Idi7M/6qV8TXLDK9EIdL0oy8vyX5IOxFUOTAYUl4Nopvo4mGc!/b/dB8BAAAAAAAA&bo=bQJoAgAAAAAFACY!&rf=viewer_4\" # Miscellaneous baidu_analytics: '' google_analytics: '' favicon: /favicon.png #你的头像url avatar: \"http://a3.qpic.cn/psb?/V12cYG6y1Idi7M/yzran5rc95ZrvYfrc9ewm7bB6vqdfzJf.TJRUnhQayo!/b/dB8BAAAAAAAA&bo=gAJVAwAAAAAFB*A!&rf=viewer_4\" #是否开启分享 share_jia: true #是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key #若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论 duoshuo: false # 样式定制 - 一般不需要修改，除非有很强的定制欲望… style: # 头像上面的背景颜色 header: '#4d4d4d' # 右滑板块背景 slider: 'linear-gradient(200deg,#a0cfe4,#e8c37e)' # slider的设置 slider: # 是否默认展开tags板块 showTags: false # 智能菜单 # 如不需要，将该对应项置为false # 比如 #smart_menu: friends: false smart_menu: innerArchive: '所有文章' friends: '友链' aboutme: '关于我' friends: 我的csdn: http://blog.csdn.net/qq_23195583/ 我的App下载链接: https://github.com/1181631922/Recreation/tree/master/apk 我的App源码: https://github.com/1181631922/Recreation/ #友情链接4: http://localhost:4000/ #友情链接5: http://localhost:4000/ #友情链接6: http://localhost:4000/ aboutme: 樊亚风Android工程师，还会点java后台谢谢大家 4.先需要在本地测试没问题，然后就是部署到github上 这里需要注意的是github创建仓库的时候需要注意：你的github的名字.github.io（我是这样的，貌似你的github的名字.github.com也可以），剩下的就是本地 init，再去合并你在github建的仓库，剩下的再去发布提交的话hexo会帮你完成。","tags":[]},{"title":"使用hexo搭建自己的博客（一）","date":"2017-02-04T06:44:58.000Z","path":"2017/02/04/hexo_01/","text":"1.先了解一下hexo的特性，以及做一些准备工作 hexo 2.我用的是mac，这里就以mac举例子，其实大同小异。 &nbsp;&nbsp;&nbsp;&nbsp; 2.1 首先需要检测以下的环境，Git大家基本上都有，剩下的就是node了 Node.js Git &nbsp;&nbsp;&nbsp;&nbsp; 2.2 node安装，有的话请略过 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.2.1首先更新一下安装源 $ brew update &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2.2.2安装node（翻墙的话可以直接执行第一行就可以） $ brew install node $ npm config set registry https://registry.npm.taobao.org --global $ npm config set disturl https://npm.taobao.org/dist --global 3.到此默认以上的环境全部安装完成。 $ npm install hexo-cli -g $ hexo init fanyafeng $ cd fanyafeng $ npm install $ hexo server &nbsp;&nbsp;&nbsp;&nbsp;这样项目就运行起来了，以下是效果图（非原主题） 4.下面看一下目录结构以及首页(我这里换了一下主题)","tags":[]},{"title":"Hello World","date":"2017-02-04T04:22:58.000Z","path":"2017/02/04/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"新年快乐","date":"2017-01-22T07:53:48.000Z","path":"2017/01/22/HappyNewYear/","text":"祝大家新年快乐，数钱数到手抽筋！！！","tags":[]}]